plugins {
    id 'java-library'
}

project.ext.set('archiveName', 'java-pcap')
project.ext.set('pcapVersion', file('VERSION').text.trim())
project.ext.set('buildDate', new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())) 
project.ext.set('mainClass', 'com.silabs.na.pcap.Main')
project.ext.set('manifestMap', [
      'Built-By'       : System.properties['user.name'],
      'Build-Timestamp': project.buildDate,
      'Created-By'     : "Gradle ${gradle.gradleVersion}",
      'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
      'Main-Class'     : project.mainClass
    ])

repositories {
    mavenCentral()
}

java {
  withJavadocJar()
  withSourcesJar()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

test {
    useJUnitPlatform()
}

javadocJar {
  archiveBaseName = project.archiveName
  archiveVersion = project.pcapVersion
}

sourcesJar {
  archiveBaseName = project.archiveName
  archiveVersion = project.pcapVersion
}


jar {
    archiveBaseName = project.archiveName
    archiveVersion = project.pcapVersion
    manifest {
        attributes(project.manifestMap)
    }
}

task generateLinkType() {
  doLast {
    def dltH = file('../../libpcap/pcap/dlt.h')
    def linkTypeJava = file('src/main/java/com/silabs/na/pcap/LinkType.java')
    def head = "head -n 29 ${linkTypeJava.toString()}".execute().text
    def tail = "tail -n 32 ${linkTypeJava.toString()}".execute().text
    def list = dltH.text.readLines().findAll { it.startsWith("#define DLT_") && !it.contains("DLT_CLASS(x)") &&!it.contains("MATCHING_MAX") }
    list = list.findAll { !(it.contains("PFSYNC") && !it.contains("246")) }
    list = list.findAll { !(it.contains("RAW") && !it.contains("12")) }
    list = list.findAll { !(it.contains("SLIP_BSDOS") && !it.contains("15")) }
    list = list.findAll { !(it.contains("PPP_BSDOS") && !it.contains("16")) }
    list = list.findAll { !(it.contains("DLT_LOOP") && !it.contains("108")) }
    list = list.findAll { !(it.contains("DLT_ENC") && !it.contains("109")) }
    list = list.findAll { !(it.contains("DLT_HDLC") && !it.contains("112")) }
    list = list.collect { l -> 
      def split = l.split("\\s+")
      if ( split[1].startsWith("DLT_") ) {
        split[1] = split[1].substring(4)
      }
      if ( split[2].startsWith("DLT_") ) {
        return ""
      } else {
        return "  ${split[1]}(${split[2]}),"
      }
    }
    def body = list.join('\n')
    linkTypeJava.text = "${head}${body}\n${tail}"
  }
}

task createBuildStamp() {
  doLast {
    def gitOutput = 'git log -1 --format=hash=%H%ndate=%cI'.execute().text
    file('src/main/resources/build_pcap.stamp').text = """version=${project.pcapVersion}
${gitOutput}"""
    project.logger.lifecycle('Created build.stamp.')
  }
}
tasks.processResources.dependsOn << 'createBuildStamp'

task all {
  description 'Toplevel task that creates everything.'
  dependsOn createBuildStamp,jar,javadocJar,sourcesJar
}

